package org.lexer.app.tools;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;

public class LexerMap {

	public int pointer;
	char[] characters;	

	public static final int[][] transitionTable = {
			{ 4, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 19, 35, 8, 1, 26, 27, 28, 29, 30, 31, 4, 4, 4 },
			{ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
			{ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
			{ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
					503, 503, 503, 503, 503, 503 },
			{ 4, 4, 4, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
					504, 504, 504, 504, 504 },
			{ 505, 505, 5, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 6, 505, 505, 505, 505, 505,
					505, 505, 505, 505 },
			{ 1002, 1002, 7, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
					1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002 },
			{ 507, 507, 7, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
					507, 507, 507, 507, 507 },
			{ 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
					508, 508, 508, 508, 508 },
			{ 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
					509, 509, 509, 509, 509 },
			{ 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
					509, 509, 509, 509, 509 },
			{ 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
					509, 509, 509, 509, 509 },
			{ 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512,
					512, 512, 512, 512, 512 },
			{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
					513, 513, 513, 513, 513 },
			{ 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514,
					514, 514, 514, 514, 514 },
			{ 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515,
					515, 515, 515, 515, 515 },
			{ 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
					516, 516, 516, 516, 516 },
			{ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
					517, 517, 517, 517, 517 },
			{ 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518,
					518, 518, 518, 518, 518 },
			{ 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 20, 21, 509, 509, 509, 509, 509,
					509, 509, 509, 509, 509 },
			{ 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
					520, 520, 520, 520, 520 },
			{ 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 },
			{ 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 },
			{ 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 },
			{ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
					524, 524, 524, 524, 524 },
			{ 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
					525, 525, 525, 525, 525 },
			{ 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526,
					526, 526, 526, 526, 526 },
			{ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
					527, 527, 527, 527, 527 },
			{ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
					528, 528, 528, 528, 528 },
			{ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
					529, 529, 529, 529, 529 },
			{ 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530,
					530, 530, 530, 530, 530 },
			{ 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
					1000, 1000, 1000, 1000, 1000, 1000, 1000, 32, 33, 34 },
			{ 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532,
					532, 532, 532, 532, 532 },
			{ 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
					533, 533, 533, 533, 533 },
			{ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
					534, 534, 534, 534, 534 },
			{ 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
					509, 509, 509, 509, 509 } };

	public void fillList(String text) {
		this.characters = text.toCharArray();		
	}

	public int forward() {
		return this.pointer++;
	}

	public int inspect() {
		char currentCharacter = this.characters[this.pointer];
		
		if(Character.isLetter(currentCharacter))
			return 1;
		if(Character.isDigit(currentCharacter))
			return 3;
		
		switch(currentCharacter) {
		
			case '_':
				return KeyConstants.UNDER_SCORE;
			
			case '+':
				return KeyConstants.SUM_OPERATOR;
				
			case '-':
				return KeyConstants.MINS_OPERATOR;
			
			case '=':
				return KeyConstants.EQLS_OPERATOR;
				
			case '!':
				return KeyConstants.NOT_OPERATOR;
				
			case '|':
				return KeyConstants.OR_OPERATOR;
				
			case '&':
				return 9;
				
			case '{':
				return 10;
				
			case '}':
				return 11;
			
			case '[':
				return 12;
				
			case ']':
				return 13;
			
			case ';':
				return 14;
			
			case '/':
				return 15;
			default:
				return -1; //return -1 if the character readed is not int the alphabet of the language
		
		}
		
	}
}
